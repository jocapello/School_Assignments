
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.*;
import java.sql.Array;
import java.util.Arrays;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;

import javax.imageio.ImageIO;
import javax.swing.*;


public class WorkMath extends JPanel {


	// cards
	private static BufferedImage [] deck= new BufferedImage [52];
	boolean Catcher=true;


	static int length=6,Points,ComputerPoints;
	static int Hand=0,Game=0,InPlay=0;
	static int start;
	static int card1,card2;
	static int [] Distance= {60,120,180,240,300,360};
	static int [] Played= {0,0,0,0,0,0,0,0,0,0,0,0,0};

	// track the originals 
	static int [] RandomCards={0,0,0,0,0,0};
	static int [] RandomCompCards={0,0,0,0,0,0};

	// track the changes
	static int [] RandomCards2={0,0,0,0,0,0};
	static int [] RandomCompCards2={0,0,0,0,0,0};

	// track the changes for drawing 
	int [] RandomCards3={0,0,0,0,0,0};
	static int [] RandomCompCards3={0,0,0,0,0,0};

	static // points in play
	int PIP=0;
	static int i=0,j1=0,X=0;
	static int [] CardHand= {0,0,0,0,0,0};
	static int [] CardHandComp= {0,0,0,0,0,0};

	static int [ ] Value2 = {1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13,
			1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13};
	static int [ ] Value = {1,2,3,4,5,6,7,8,9,10,10,10,10,1,2,3,4,5,6,7,8,9,10,10,10,10,
			1,2,3,4,5,6,7,8,9,10,10,10,10,1,2,3,4,5,6,7,8,9,10,10,10,10};
	static int r;
	static int [ ]  Numbered = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,
			27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52};
	int [ ]  Numbered2 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,
			27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52};

	public void paintComponent(java.awt.Graphics g)
	{
		super.paintComponent(g);

		if (Catcher==true)
		{
			//generate cards

			try   // load the images 
			{

				// cards

				// Clubs
				deck[0]=ImageIO.read(new File("AC.png"));
				deck[1]=ImageIO.read(new File("2C.png"));
				deck[2]=ImageIO.read(new File("3C.png"));
				deck[3]=ImageIO.read(new File("4C.png"));
				deck[4]=ImageIO.read(new File("5C.png"));
				deck[5]=ImageIO.read(new File("6C.png"));
				deck[6]=ImageIO.read(new File("7C.png"));
				deck[7]=ImageIO.read(new File("8C.png"));
				deck[8]=ImageIO.read(new File("9C.png"));
				deck[9]=ImageIO.read(new File("10C.png"));
				deck[10]=ImageIO.read(new File("JC.png"));
				deck[11]=ImageIO.read(new File("QC.png"));
				deck[12]=ImageIO.read(new File("KC.png"));
				// Diamonds
				deck[13]=ImageIO.read(new File("AD.png"));
				deck[14]=ImageIO.read(new File("2D.png"));
				deck[15]=ImageIO.read(new File("3D.png"));
				deck[16]=ImageIO.read(new File("4D.png"));
				deck[17]=ImageIO.read(new File("5D.png"));
				deck[18]=ImageIO.read(new File("6D.png"));
				deck[19]=ImageIO.read(new File("7D.png"));
				deck[20]=ImageIO.read(new File("8D.png"));
				deck[21]=ImageIO.read(new File("9D.png"));
				deck[22]=ImageIO.read(new File("10D.png"));
				deck[23]=ImageIO.read(new File("JD.png"));
				deck[24]=ImageIO.read(new File("QD.png"));
				deck[25]=ImageIO.read(new File("KD.png"));
				// Hearts				
				deck[26]=ImageIO.read(new File("AH.png"));
				deck[27]=ImageIO.read(new File("2H.png"));
				deck[28]=ImageIO.read(new File("3H.png"));
				deck[29]=ImageIO.read(new File("4H.png"));
				deck[30]=ImageIO.read(new File("5H.png"));
				deck[31]=ImageIO.read(new File("6H.png"));
				deck[32]=ImageIO.read(new File("7H.png"));
				deck[33]=ImageIO.read(new File("8H.png"));
				deck[34]=ImageIO.read(new File("9H.png"));
				deck[35]=ImageIO.read(new File("10H.png"));
				deck[36]=ImageIO.read(new File("JH.png"));
				deck[37]=ImageIO.read(new File("QH.png"));
				deck[38]=ImageIO.read(new File("KH.png"));
				// Spades
				deck[39]=ImageIO.read(new File("AS.png"));
				deck[40]=ImageIO.read(new File("2S.png"));
				deck[41]=ImageIO.read(new File("3S.png"));
				deck[42]=ImageIO.read(new File("4S.png"));
				deck[43]=ImageIO.read(new File("5S.png"));
				deck[44]=ImageIO.read(new File("6S.png"));
				deck[45]=ImageIO.read(new File("7S.png"));
				deck[46]=ImageIO.read(new File("8S.png"));
				deck[47]=ImageIO.read(new File("9S.png"));
				deck[48]=ImageIO.read(new File("10S.png"));
				deck[49]=ImageIO.read(new File("JS.png"));
				deck[50]=ImageIO.read(new File("QS.png"));
				deck[51]=ImageIO.read(new File("KS.png"));
			}
			catch(IOException e)  		//catching if the image was not there
			{
				System.out.println("could not find image");
				g.drawString("Could not find images",100,100);
			}
			Catcher=false;
		}}
	public void Draw(java.awt.Graphics g) {

		repaint();
		DeckShuffler();
		paintComponent(g);
		Hand=1;
		Crib Clickie = new Crib();
		Clickie.
		

	
		if (Hand==1) {

			for (int i=0;i<6;i++) //Draw the number of cards
			{				
				// Draw cards after there thrown
			//	if (RandomCards2[i]!=100) {
					g.drawImage(deck[RandomCards[i]], 400+200*i,700, 200,200,this);
				//}
				Font myFont2 = new Font("Arial", Font.PLAIN,30);  //Set the font to a bigger size
				g.setFont(myFont2);// write text on the screen starting at location (250,30)
				g.drawString ("Card"+i,400+200*i,920);
				repaint();
			}
			for (int i=0;i<6;i++) //Draw the number of cards
			{
				// Draw cards after there thrown
				if (RandomCompCards2[i]!=100) {
					g.drawImage(deck[RandomCompCards[i]], 400+200*i,20, 200,200,this);
				}
			}
		}

		
//		g.setColor(new Color(255,100,255));
//        g.fillOval(-500,-500,3000,3000);
		
			for (int i=0;i<6;i++) //Draw the number of player cards
			{
			
			//	System.out.println(RandomCards[i]);
				
				g.drawImage(deck[RandomCards[i]], 400+200*i,700, 200,200,this);
				Font myFont2 = new Font("Arial", Font.PLAIN,30);  //Set the font to a bigger size
				g.setFont(myFont2);// write text on the screen starting at location (250,30)
				g.drawString ("Card"+i,400+200*i,920);
				repaint();
			}
			for (int i=0;i<6;i++) //Draw the number comp of cards
			{
				g.drawImage(deck[RandomCompCards[i]],400+200*i,20, 200,200,this);
				Font myFont2 = new Font("Arial", Font.PLAIN,30);  //Set the font to a bigger size
				g.setFont(myFont2);// write text on the screen starting at location (250,30)
				g.drawString ("Card"+i,400+200*i,920);
				repaint();
			}
		}
	

	public static void DeckShuffler() {
		// players hand
			for (int i=0;i<6;i++) {
				r=(int)(Math.random( )* 50  + 1);
				if (Numbered[r]!=100) {
					RandomCards[i]=Numbered[r];
					Numbered[r]=100;
				}}
			
		// computers hand
		for (int i=0;i<6;i++) {
			r=(int)(Math.random( )* 50  + 1);
			if (Numbered[r]!=100) {
				RandomCompCards[i]=Numbered[r];
		//		System.out.println(RandomCompCards[i]);
				Numbered[r]=100;
			}
		}
	}
	public static void RandomSelector() {
		X=(int)(Math.random( )* 6);
		if (RandomCompCards2[X]!=100) {
			RandomCompCards2[X]=100;
		}
		else {
			RandomSelector();
		}
		CardHandComp[X]=1;
	}
}