package FileHandling;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.event.KeyListener;
import java.util.Timer;
import java.util.TimerTask;
import java.awt.event.KeyEvent;
import java.io.File; // File class
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException; // handle errors
import java.util.Scanner;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.awt.*;
import java.awt.event.InputEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.*;

public class TwentyEight extends JPanel implements ActionListener, KeyListener, MouseListener
{

	//Timer t = new Timer(5,this);


	//	int Sec=0;
	//    Timer timer = new Timer();
	//    TimerTask task = new TimerTask() {
	//    	public void run() {
	//    		Sec++;
	//    		System.out.println(Sec);
	//    	}
	//    };
	//    public void Start() {
	//    	// 1000 mil secs
	//    	timer.scheduleAtFixedRate(task,1000,1000);
	//    }
	public TwentyEight()//Starts timer
	{
		//	t.start();	
		addMouseListener(this);		
		addKeyListener(this);
		setFocusable(true);
		setFocusTraversalKeysEnabled(false);
	}
	static int [][] Board = {{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0}};
	static int [][] BoardDisX = {{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0}};
	static int [][] BoardDisY = {{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0}};
	static int Movex=300,Movey=100,Points=0,Scene=0,DarkMode=0,DMODEX=680;

	public void paintComponent(Graphics g) {

		super.paintComponent(g);
		// draw a black circle on the screen at location (x,y)		
		//			g.setColor(Color.YELLOW);
		//			g.fillOval(x,y,200,200);
		//			
		//			g.setColor(Color.BLACK);
		//			g.fillOval(x+20,y+20,50,50);
		//			g.fillOval(x+100,y+20,50,50);
		//			
		//			g.fillRect (x , y, 200, 20);
		//			g.fillRect (x+30 , y, 140, -100);
		//			
		//			
		//			g.setColor(Color.WHITE);
		//			g.fillOval(x+25,y+25,15,15);
		//			g.fillOval(x+105,y+25,15,15);
		//
		//			g.setColor(new Color(255,0,0));
		//			g.fillOval(x+15,y+110,120,20);

		if (Scene==0) {
			g.setColor(Color.WHITE); // Draw the border of game
			g.fillRect (0 , 0, 7500, 7500);
			Font myFont = new Font("Arial", Font.PLAIN,150);  //Set the font to a bigger size
			g.setFont(myFont);// write text on the screen starting at location (250,30)
			g.setColor(Color.BLACK);
			g.drawString ("Welcome to 2048!",150,200);		
			Font myFont2 = new Font("Arial", Font.PLAIN,80);  //Set the font to a bigger size
			g.setFont(myFont2);// write text on the screen starting at location (250,30)
			g.drawString ("Play - Press_____",150,400);		
			g.drawString ("How to play - Press 2",150,500);		
			g.drawString ("Settings - Press 3",150,600);		
			g.drawString ("Customize - Press_____",150,700);		
			g.setColor(Color.BLACK); // Draw the border of game
			g.fillRect (1305 , 455, 400, 400);
			g.setColor(Color.GRAY); // Draw the "background squares"
			int x2=1300,y2=450;
			for (int i=0;i<4;i++) {
				for (int j=0;j<4;j++) {
					g.fillRect (x2+30 , y2+30, 80, 80); // Space all of them
					x2=x2+90;
				}
				x2=1300; // To restart
				y2=y2+90; // On next row
			}

		}

		if (Scene==1) { // The scene that plays the game 

			int x=300,y=100;
		
			if (DarkMode==1) {
				Color Gray = new Color(186, 180, 180); // Color white
				g.fillRect (0 , 0, 7500, 7500);
				g.setColor(Color.BLACK); // Draw the border of game
			}
			else {
				g.setColor(Color.WHITE); // Draw the border of game
			}
			g.fillRect (x , y, 750, 750);
			g.setColor(Color.GRAY); // Draw the "background squares"
			for (int i=0;i<4;i++) {
				for (int j=0;j<4;j++) {
					g.fillRect (x+50 , y+50, 150, 150); // Space all of them
					x=x+170;
				}
				x=300; // To restart
				y=y+170; // On next row
			}

			// Display the points
			Font TheFont = new Font("Arial", Font.PLAIN,100);  //Set the font to a bigger size
			g.setFont(TheFont);// write text on the screen starting at location (250,30)
			String TheString = Integer.toString(Points);
			if (DarkMode==0) {
				g.setColor(Color.BLACK);
			}
			else {
				g.setColor(Color.WHITE);
			}
			g.drawString ("Points - ",1200,200);		
			g.drawString (TheString,1600,200);		

			// Draw active squares
			for (int i=0;i<4;i++) {
				for (int j=0;j<4;j++) {
					if (Board[i][j]>0) {
						g.setColor(Color.YELLOW);

						g.fillRect (Movex+BoardDisX[i][j]+50 , Movey+BoardDisY[i][j]+50, 150, 150);
						if (Board[i][j]<10) {
							Font myFont = new Font("Arial", Font.PLAIN,100);  //Set the font to a bigger size
							g.setFont(myFont);// write text on the screen starting at location (250,30)
							String Mystring = "";
							Mystring=Board[i][j]+" "; // Draw the values for the squares
							if (DarkMode==0) {
								g.setColor(Color.BLACK);
							}
							else {
								g.setColor(Color.WHITE);
							}
							g.drawString (Mystring,Movex+BoardDisX[i][j]+100,Movey+BoardDisY[i][j]+170);						
						}
						if (Board[i][j]<100 && Board[i][j]>9) {
							Font myFont = new Font("Arial", Font.PLAIN,100);  //Set the font to a bigger size
							g.setFont(myFont);// write text on the screen starting at location (250,30)
							String Mystring = "";
							Mystring=Board[i][j]+" "; // Draw the values for the squares
							if (DarkMode==0) {
								g.setColor(Color.BLACK);
							}
							else {
								g.setColor(Color.WHITE);
							}
							g.drawString (Mystring,Movex+BoardDisX[i][j]+70,Movey+BoardDisY[i][j]+170);						
						}
						if (Board[i][j]<1000  && Board[i][j]>99) {
							Font myFont = new Font("Arial", Font.PLAIN,90);  //Set the font to a bigger size
							g.setFont(myFont);// write text on the screen starting at location (250,30)
							String Mystring = "";
							Mystring=Board[i][j]+" "; // Draw the values for the squares
							if (DarkMode==0) {
								g.setColor(Color.BLACK);
							}
							else {
								g.setColor(Color.WHITE);
							}
							g.drawString (Mystring,Movex+BoardDisX[i][j]+50,Movey+BoardDisY[i][j]+170);						
						}
					}
					x=x+170;
				}
				x=300;
				y=y+170;
			}
		}
		// The how to play screen
		if (Scene==2) { 
			g.setColor(Color.WHITE); // Draw the border of game
			g.fillRect (0 , 0, 7500, 7500);
			Font myFont = new Font("Arial", Font.PLAIN,150);  //Set the font to a bigger size
			g.setFont(myFont);// write text on the screen starting at location (250,30)
			g.setColor(Color.BLACK);
			g.drawString ("How to Play",150,200);		
			Font myFont2 = new Font("Arial", Font.PLAIN,70);  //Set the font to a bigger size
			g.setFont(myFont2);// write text on the screen starting at location (250,30)
			g.drawString ("Use your arrow keys to move the tiles. When two tiles ",150,400);
			g.drawString ("with the same number touch, they merge into one! ",150,470);	
			g.drawString ("Reach 2048 or go until you get stuck!",150,540);	
			// Get out of that screen
			Font myFont3 = new Font("Arial", Font.PLAIN,40);  //Set the font to a bigger size
			g.setFont(myFont3);// write text on the screen starting at location (250,30)
			g.drawString ("Press space to play or 9 to return to main menu",920,940);	
		}
		
		// The settings screen
		if (Scene==3) { 
			g.setColor(Color.WHITE); // Draw the border of game
			g.fillRect (0 , 0, 7500, 7500);
			Font myFont = new Font("Arial", Font.PLAIN,150);  //Set the font to a bigger size
			g.setFont(myFont);// write text on the screen starting at location (250,30)
			g.setColor(Color.BLACK);
			g.drawString ("Settings",150,200);		
			Font myFont2 = new Font("Arial", Font.PLAIN,80);  //Set the font to a bigger size
			g.setFont(myFont2);// write text on the screen starting at location (250,30)
			g.drawString ("Dark mode - ",150,400);	
			// Draw the slider 
			g.setColor(Color.RED); // Draw the border of game
			g.fillRect (600 , 320, 80, 100);
			g.setColor(Color.GREEN); // Draw the border of game
			g.fillRect (680 , 320, 80, 100);
			g.setColor(Color.BLACK); // Draw the border of game
			g.fillRect (DMODEX , 320, 80, 100);
			// Get out of that screen 
			Font myFont3 = new Font("Arial", Font.PLAIN,40);  //Set the font to a bigger size
			g.setFont(myFont3);// write text on the screen starting at location (250,30)
			g.drawString ("Press space to play or 9 to return to main menu",920,940);	

		}

		if (Scene==4) {
			Color A1= new Color(65, 60, 88); 
			Color A2= new Color(163, 196, 188); 
			Color A3= new Color(63, 215, 181); 
			Color A4= new Color(231, 239, 197); 
			Color B1= new Color(0, 78, 100); 
			Color B2= new Color(0, 165, 207); 
			Color B3= new Color(159, 255, 203); 
			Color B4= new Color(37, 161, 142); 
			Color C1= new Color(237, 37, 76); 
			Color C2= new Color(249, 220, 92); 
			Color C3= new Color(244, 255, 253); 
			Color C4= new Color(1, 25, 54); 
			Color D1= new Color(162, 0, 33); 
			Color D2= new Color(245, 47, 87); 
			Color D3= new Color(247, 157, 92); 
			Color D4= new Color(243, 117, 43); 
			Color E1= new Color(193, 121, 185); 
			Color E2= new Color(164, 44, 214); 
			Color E3= new Color(80, 34, 116); 
			Color E4= new Color(47, 36, 44); 
			Color F1= new Color(20, 18, 4); 
			Color F2= new Color(38, 42, 16); 
			Color F3= new Color(84, 68, 43); 
			Color F4= new Color(169, 113, 75); 
			Color G1= new Color(238, 186, 11); 
			Color G2= new Color(195, 111, 9); 
			Color G3= new Color(166, 60, 6); 
			Color G4= new Color(113, 0, 0); 
			
			g.setColor(Color.GRAY); // Draw the border of game
			g.fillRect (0 , 0, 7500, 7500);
			Font myFont = new Font("Arial", Font.PLAIN,150);  //Set the font to a bigger size
			g.setFont(myFont);// write text on the screen starting at location (250,30)
			g.setColor(Color.BLACK);
			g.drawString ("Customize",150,200);		
			Font myFont2 = new Font("Arial", Font.PLAIN,80);  //Set the font to a bigger size
			g.setFont(myFont2);// write text on the screen starting at location (250,30)
			//g.drawString ("Dark mode - ",150,400);	
	
			// Get out of that screen 
			Font myFont3 = new Font("Arial", Font.PLAIN,40);  //Set the font to a bigger size
			g.setFont(myFont3);// write text on the screen starting at location (250,30)
			g.drawString ("Press space to play or 9 to return to main menu",920,940);	

		}




	}
	public static void Customize() {
		ReadSettings();

	}
	public static void WriteSettings() {
		//	Write to the file
				try {
					FileWriter myWriter = new FileWriter("C:\\Users\\jocap\\Desktop\\Computer science 12 Almost done\\Filef1.txt");
					Scanner input = new Scanner (System.in);
					String X = input.nextLine();
					myWriter.write(X);
					myWriter.close();
					System.out.println("Wrote");
				} catch (IOException e) {
					System.out.println("Error");
					e.printStackTrace();
				}
	}
	public static void ReadSettings() {
		// Read
		try {
			File myObj = new File("C:\\Users\\jocap\\Desktop\\Computer science 12 Almost done\\2048\\GameInfo.txt");
			Scanner myReader = new Scanner(myObj);
			while (myReader.hasNextLine()) {
				String data = myReader.nextLine();
				System.out.println(data);
			}
			myReader.close();
		} catch (FileNotFoundException e) {
			System.out.println("Error");
			e.printStackTrace();
		}



	}
	public static void PlayGame() {
		SetUp(Board);
	}
	static int Count=0,Count2=0;
	public static void SetUp(int [][] Board) {
		Count++;
		int numX=(int)(Math.random( )* 4);
		int numY=(int)(Math.random( )* 4); 
		//int numY=0,numX=0;
		int Val=(int)(Math.random( )* 2);

		if (Board[numX][numY]>0) {
			Count2++;
			//		System.out.println(Count2);
			SetUp(Board);
		}
		Count++;
		//	System.out.println("Hi");
		//	System.out.println("count is "+ Count+"   "+numX+" "+numY+"   "+Val);
		BoardDisX[numX][numY]=(170*(numY));
		BoardDisY[numX][numY]=(170*(numX));

		if (Val==1 && Board[numX][numY]==0) {
			Board[numX][numY]=2;
		}
		if (Val==0 && Board[numX][numY]==0) {
			Board[numX][numY]=4;
		}
		//		for (int i=0;i<4;i++) {
		//			for (int j=0;j<4;j++) {
		//				System.out.print(BoardDisY[i][j]+" ");
		//			}
		//			System.out.println();			
		//
		//
		//		}
		//		System.out.println();
		//		System.out.println();
		//		for (int i=0;i<4;i++) {
		//			for (int j=0;j<4;j++) {
		//				System.out.print(Board[i][j]+" ");
		//			}
		//			System.out.println();
		//		}
	}
	static int C=0;

	public void actionPerformed(ActionEvent e) {
		// refreshes the screen every time an action is performed
		repaint(); //performs any code in paint
	}
	static int x=0,y=0,StatI,StatJ;
	@Override
	public void keyPressed(KeyEvent e) 
	{
		int code = e.getKeyCode();
		switch(code)
		{
		case KeyEvent.VK_DOWN:

			for (int i=3;i>=0;i--) {
				for (int j=3;j>=0;j--) {

					if (i+1<4) {
						if(BoardDisY[i][j]<=340 && Board[i][j]!=0 && Board[i+1][j]==0) {
							if (i+3<4) {
								if (Board[i+3][j]==0 && Board[i+2][j]==0 && Board[i+1][j]==0) {
									BoardDisY[i+3][j]=BoardDisY[i][j]+510;
									BoardDisY[i][j]=0;
									Board[i+3][j]=Board[i][j];
									Board[i][j]=0;
									BoardDisX[i+3][j]=BoardDisX[i][j];
									BoardDisX[i][j]=0;
									i=3;
									j=3;
								}
							}
							if (i+2<4) {
								if (Board[i+2][j]==0 && Board[i+1][j]==0) {
									BoardDisY[i+2][j]=BoardDisY[i][j]+340;
									BoardDisY[i][j]=0;
									Board[i+2][j]=Board[i][j];
									Board[i][j]=0;
									BoardDisX[i+2][j]=BoardDisX[i][j];
									BoardDisX[i][j]=0;
									i=3;
									j=3;
								}
							}
							if (i+1<4) {
								if (Board[i+1][j]==0) {
									BoardDisY[i+1][j]=BoardDisY[i][j]+170;
									BoardDisY[i][j]=0;
									Board[i+1][j]=Board[i][j];
									Board[i][j]=0;
									BoardDisX[i+1][j]=BoardDisX[i][j];
									BoardDisX[i][j]=0;
									i=3;
									j=3;
								}
							}

						}
					}
					if (i-1>=0) { // Code to combine the blocks
						if(Board[i][j]==Board[i-1][j] && Board[i][j]!=0) {
							Points=Points+Board[i-1][j]+Board[i][j];
							Board[i][j]=Board[i][j]+Board[i-1][j];
							Board[i-1][j]=0;
							BoardDisY[i-1][j]=0;
							BoardDisX[i-1][j]=0;
							j=3;
						}}
					else {
						BoardDisY[i][j]=BoardDisY[i][j];
					}

				}				
			}


			repaint();
			PlayGame();
			break;
		case KeyEvent.VK_UP:


			for (int i=0;i<4;i++) {
				for (int j=0;j<4;j++) {

					if (i-1>=0) {
						if(BoardDisY[i][j]>=0 && Board[i][j]!=0 && Board[i-1][j]==0) {
							if (i-3>=0) {
								if (Board[i-3][j]==0 && Board[i-2][j]==0 && Board[i-1][j]==0) {
									BoardDisY[i-3][j]=BoardDisY[i][j]-510;
									BoardDisY[i][j]=0;
									Board[i-3][j]=Board[i][j];
									Board[i][j]=0;
									BoardDisX[i-3][j]=BoardDisX[i][j];
									BoardDisX[i][j]=0;
									i=0;
									j=0;
								}
							}
							if (i-2>=0) {
								if (Board[i-2][j]==0 && Board[i-1][j]==0) {
									BoardDisY[i-2][j]=BoardDisY[i][j]-340;
									BoardDisY[i][j]=0;
									Board[i-2][j]=Board[i][j];
									Board[i][j]=0;
									BoardDisX[i-2][j]=BoardDisX[i][j];
									BoardDisX[i][j]=0;
									i=0;
									j=0;
								}
							}
							if (i-1>=0) {
								if (Board[i-1][j]==0) {
									BoardDisY[i-1][j]=BoardDisY[i][j]-170;
									BoardDisY[i][j]=0;
									Board[i-1][j]=Board[i][j];
									Board[i][j]=0;
									BoardDisX[i-1][j]=BoardDisX[i][j];
									BoardDisX[i][j]=0;
									i=0;
									j=0;
								}
							}
						}
					}
					if (i+1<4) { // Code to combine the blocks
						if(Board[i][j]==Board[i+1][j] && Board[i][j]!=0) {
							Points=Points+Board[i+1][j]+Board[i][j];
							Board[i][j]=Board[i][j]+Board[i+1][j];
							Board[i+1][j]=0;
							BoardDisY[i+1][j]=0;
							BoardDisX[i+1][j]=0;
							j=0;
						}}
					else {
						BoardDisY[i][j]=BoardDisY[i][j];
					}
				}				
			}
			repaint();
			PlayGame();
			break;
		case KeyEvent.VK_RIGHT:

			for (int i=3;i>=0;i--) {
				for (int j=3;j>=0;j--) {

					if (j+1<4) {
						if(BoardDisX[i][j]<=340 && Board[i][j]!=0 && Board[i][j+1]==0) {
							if (j+3<4) {
								if (Board[i][j+3]==0 && Board[i][j+2]==0 && Board[i][j+1]==0) {
									BoardDisY[i][j+3]=BoardDisY[i][j];
									BoardDisY[i][j]=0;
									Board[i][j+3]=Board[i][j];
									Board[i][j]=0;
									BoardDisX[i][j+3]=BoardDisX[i][j]+510;
									BoardDisX[i][j]=0;
									i=3;
									j=3;
								}
							}
							if (j+2<4) {
								if (Board[i][j+2]==0 && Board[i][j+1]==0) {
									BoardDisY[i][j+2]=BoardDisY[i][j];
									BoardDisY[i][j]=0;
									Board[i][j+2]=Board[i][j];
									Board[i][j]=0;
									BoardDisX[i][j+2]=BoardDisX[i][j]+340;
									BoardDisX[i][j]=0;
									i=3;
									j=3;
								}
							}
							if (j+1<4) {
								if (Board[i][j+1]==0) {
									BoardDisY[i][j+1]=BoardDisY[i][j];
									BoardDisY[i][j]=0;
									Board[i][j+1]=Board[i][j];
									Board[i][j]=0;
									BoardDisX[i][j+1]=BoardDisX[i][j]+170;
									BoardDisX[i][j]=0;
									i=3;
									j=3;
								}
							}
						}
					}
					if (j+1<4) { // Code to combine the blocks
						if(Board[i][j]==Board[i][j+1] && Board[i][j]!=0) {
							Points=Points+Board[i][j+1]+Board[i][j];
							Board[i][j]=Board[i][j]+Board[i][j+1];
							Board[i][j+1]=0;
							BoardDisY[i][j+1]=0;
							BoardDisX[i][j+1]=0;
							i=3;
						}}
					else {
						BoardDisX[i][j]=BoardDisX[i][j];
					}
				}				
			}
			repaint();
			PlayGame();
			break;
		case KeyEvent.VK_LEFT:

			for (int i=0;i<4;i++) {
				for (int j=0;j<4;j++) {

					// Move the blocks code
					if (j-1>=0) {
						if(BoardDisX[i][j]>=0 && Board[i][j]!=0 && Board[i][j-1]==0) {
							if(j-3>=0) {
								if (Board[i][j-3]==0 && Board[i][j-2]==0 && Board[i][j-1]==0) {
									BoardDisY[i][j-3]=BoardDisY[i][j];
									BoardDisY[i][j]=0;
									Board[i][j-3]=Board[i][j];
									Board[i][j]=0;
									BoardDisX[i][j-3]=BoardDisX[i][j]-510;
									BoardDisX[i][j]=0;
									i=0;
									j=0;
								}
							}
							if(j-2>=0) {
								if (Board[i][j-2]==0 && Board[i][j-1]==0) {
									BoardDisY[i][j-2]=BoardDisY[i][j];
									BoardDisY[i][j]=0;
									Board[i][j-2]=Board[i][j];
									Board[i][j]=0;
									BoardDisX[i][j-2]=BoardDisX[i][j]-340;
									BoardDisX[i][j]=0;
									i=0;
									j=0;
								}
							}
							if(j-1>=0) {
								if (Board[i][j-1]==0) {
									BoardDisY[i][j-1]=BoardDisY[i][j];
									BoardDisY[i][j]=0;
									Board[i][j-1]=Board[i][j];
									Board[i][j]=0;
									BoardDisX[i][j-1]=BoardDisX[i][j]-170;
									BoardDisX[i][j]=0;
									i=0;
									j=0;
								}
							}
						}
					}
					if (j+1<4) { // Code to combine the blocks
						if(Board[i][j]==Board[i][j+1] && Board[i][j]!=0) {
							Points=Points+Board[i][j+1]+Board[i][j];
							Board[i][j]=Board[i][j]+Board[i][j+1];
							Board[i][j+1]=0;
							BoardDisY[i][j+1]=0;
							BoardDisX[i][j+1]=0;
							i=0;
						}}
					else {
						BoardDisX[i][j]=BoardDisX[i][j];
					}
				}				
			}
			repaint();
			PlayGame();
			break;
		case KeyEvent.VK_2: // How to Play
			Scene=2;
			repaint();
			break;
		case KeyEvent.VK_3: // Settings
			Scene=3;
			repaint();
			break;
		case KeyEvent.VK_4: // Customize
			Scene=4;
			repaint();
			Customize();
			break;
		case KeyEvent.VK_9: // Takes you back
			Scene=0;
			repaint();
			break;
		case KeyEvent.VK_SPACE: // Play
			int i=(int)(Math.random( )* 4);	
			int j=(int)(Math.random( )* 4);

			Scene=1;
			SetUp(Board);
			repaint();
			break;
		}
	}
	@Override
	public void mouseClicked (MouseEvent e)
	{
		Graphics g = getGraphics();
		x=e.getX(); // get the x and y location of the mouse
		y=e.getY();
		if (Scene==3) {


			if (x>=600 && x<=780 && y>=320 && y<=400)
			{
				if (DMODEX==680) {
					DMODEX=600;
					DarkMode=1;
				}
				else {
					DMODEX=680;
				}
				repaint();
			}

			else 
			{
				Font myFont = new Font("Arial", Font.PLAIN,100);  //Set the font to a bigger size
				g.setFont(myFont);
				g.drawString ("Miss",100,300);
			}
		}
	}
	@Override
	public void keyReleased(KeyEvent arg0) { }
	@Override
	public void keyTyped(KeyEvent arg0) { }

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}
	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}
	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}
	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}
	
}


